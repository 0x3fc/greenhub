#!/usr/bin/python
from CLI import CommandLineArgs
from Greenhub import Greenhub


def commit_everyday(command: CommandLineArgs):
    """
    Signature:
        everyday

    Description:
        commit everyday in the past to fill github contribution graph

    Options:
        --start_date               (str) : the start date of the commit, default the first date in Github page
        --commit_times_lower_bound (int) : the everyday commit times lower bound, default 1
        --commit_times_upper_bound (int) : the everyday commit times upper bound, default 1
        --change_commit_date       (bool): update all the commit date to author date
        --push                     (bool): push the commits at the end
        --force                    (bool): do a force push if is pushing

    Examples:
        python3 green everyday
    """

    # get start date
    start_date = command.get_param('start_date')

    # get commit times bounds
    commit_times_lower_bound = command.get_param('commit_times_lower_bound')
    commit_times_upper_bound = command.get_param('commit_times_upper_bound')

    if commit_times_lower_bound is None:
        commit_times_lower_bound = 1

    if commit_times_upper_bound is None:
        commit_times_upper_bound = 1

    commit_times = [commit_times_lower_bound, commit_times_upper_bound]

    # commit
    Greenhub.commit_everyday(start_date, commit_times)

    # change commit date
    if command.get_flag('change_commit_date'):
        Greenhub.filter_commit_date()

    # push
    if command.get_flag('push'):
        Greenhub.push(force=command.get_flag('force'))


def commit_graph(command: CommandLineArgs):
    """
    Signature:
        graph

    Description:
        commit github contribution using a graph

    Options:
        --name               (str) : the graph name
        --base               (int) : the base number of commit times (except 0 times)
        --change_commit_date (bool): update all the commit date to author date
        --push               (bool): push the commits at the end
        --force              (bool): do a force push if is pushing

    Examples:
        python3 green graph
    """

    # get graph file name
    name = command.get_param('name')

    # commit graph
    Greenhub.commit_graph(name)

    # change commit date
    if command.get_flag('change_commit_date'):
        Greenhub.filter_commit_date()

    # push
    if command.get_flag('push'):
        Greenhub.push(force=command.get_flag('force'))


argv = CommandLineArgs()

argv.add_command('everyday', commit_everyday)

argv.add_command('graph', commit_graph)

argv.handle()
